# -*- coding: utf-8 -*-
"""lr6.ipynb

Automatically generated by Colaboratory.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error

data = np.genfromtxt('Копия ex1data2.txt', delimiter=',')

# линейная модель, которая учитывает только размер жилья и
# полиномиальная модель (степени 2 и 3), учитывающая только размер жилья

x, y = data[:,0], data[:,2] # выбор столбцов square_house и cost

x = x[~np.isnan(y)] # удаление значений NaN
y = y[~np.isnan(y)]

for deg in [1, 2, 3]: # степени полинома 1 (линейная модель), 2 и 3 (полиномиальная модель)
    # вычисление параметров модели
    f1p, residuals, rank, sv, rcond = np.polyfit(x, y, deg, full=True)
    f1 = np.poly1d(f1p)
    fx = np.linspace(min(x), max(x), 500) # подписи по оси X

    # построение графика
    plt.scatter(x, y, s=10) # точки (исходные данные)
    plt.plot(fx, f1(fx), linewidth=1.0, color='magenta') # линия регрессии
    plt.title('Зависимость стоимости дома от его площади')
    plt.xlabel('Площадь')
    plt.ylabel('Стомость')
    plt.grid(True) # отображение сетки на графике
    plt.show()

    # расчёт прогнозных значений
    print(f'square_house = 1650, cost = {f1(1650):.2f}')
    print(f'square_house = 2200, cost = {f1(2200):.2f}')

    y_pred = [f1(val) for val in x] # вычисление прогнозных значений для всех входных X (для расчёта MAE, MSE, RMSE)

    # метрики качества модели
    print('MAE: {:.2f}'.format(mean_absolute_error(y, y_pred)))
    print('MSE: {:.2f}'.format(mean_squared_error(y, y_pred)))
    print('RMSE: {:.2f}'.format(np.sqrt(mean_squared_error(y, y_pred))))

print('-' * 30)

# линейная модель (с помощью scikit-learn), которая учитывает бы размер жилья и количество комнат
x, y = data[:,[0,1]], data[:,2] # данные X содержат square_house и number_of_rooms, данные Y - cost

x = x[~np.isnan(y)] # удаление значений NaN
y = y[~np.isnan(y)]

# вычисление параметров модели
model = LinearRegression()
model.fit(x, y)

# расчёт прогнозных значений
x_test = [[1650, 3], [2200, 4]]
y_pred = model.predict(x_test)
print('square_house = 1650, rooms = 3, cost = {:.2f}'.format(y_pred[0]))
print('square_house = 2200, rooms = 4, cost = {:.2f}'.format(y_pred[1]))

# вычисление прогнозных значений для всех входных X (для расчёта MAE, MSE, RMSE)
y_pred_multiple_model = model.predict(x)

# метрики качества модели
print('MAE: {:.4f}'.format(mean_absolute_error(y, y_pred_multiple_model)))
print('MSE: {:.4f}'.format(mean_squared_error(y, y_pred_multiple_model)))
print('RMSE: {:.4f}'.format(np.sqrt(mean_squared_error(y, y_pred_multiple_model))))

"""Среди моделей, учитывающих только размер жилья, наименьшую ошибку даёт модель с полиномом 3 степени. Это может быть связано с характером расположения точец в области (3500, 4500).

**Линейная модель:**

square_house = 1650, cost = 293237.22

square_house = 2200, cost = 367226.13

MAE: 52004.81

MSE: 4116265480.87

RMSE: 64158.13

**Полиномиальная модель (степень полинома 2):**

square_house = 1650, cost = 293387.08

square_house = 2200, cost = 368112.59

MAE: 51990.96

MSE: 4115290102.06

RMSE: 64150.53

**Полиномиальная модель (степень полинома 3):**

square_house = 1650, cost = 285422.83

square_house = 2200, cost = 365824.75

MAE: 51519.34

MSE: 4009385955.44

RMSE: 63319.71

**Линейная модель, учитывающая размер жилья и кол-во комнат:**

square_house = 1650, rooms = 3, cost = 293081.46

square_house = 2200, rooms = 4, cost = 360909.32

MAE: 51502.7684

MSE: 4086560101.2057

RMSE: 63926.2082
"""